# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui_model2.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import re
from custom_widgets import SyntaxHighlighter
from config import get_widget_style

class SearchThread(QtCore.QThread):
    found_signal = QtCore.pyqtSignal(str, int)
    
    def __init__(self, paths, exeption_paths, pattern, file_extension=None, limits=None):
        super().__init__()
        self.paths = paths
        self.exeption_paths = exeption_paths
        self.pattern = pattern
        self.file_extension = file_extension
        
        if limits:
            self.limits_max_results_count = limits["max_results"]
            self.limits_max_file_size = limits["max_file_size"]
        else:
            self.limits_max_results_count = -1
            self.limits_max_file_size = -1
            
        self.is_running = True

    def run(self):
        results_count = 0
        
        if len(self.paths) != 0:
            try:
                regex = re.compile(self.pattern)
            except Exception as e:
                print("Failed to compile regex. Error: ", e)
                return
            for path in self.paths:
                if not self.is_running or (self.limits_max_results_count != -1 and results_count >= self.limits_max_results_count):
                    break
                for root, _, files in os.walk(path):
                    if not self.is_running or (self.limits_max_results_count != -1 and results_count >= self.limits_max_results_count):
                        break
                    
                    # Check for exeption paths
                    normalized_root = os.path.normpath(root)
                    if any(normalized_root.startswith(os.path.normpath(exclusion)) for exclusion in self.exeption_paths):
                        continue
                    
                    for file in files:
                        if not self.is_running or (self.limits_max_results_count != -1 and results_count >= self.limits_max_results_count):
                            break
                        if not self.file_extension or any(file.endswith(extension) for extension in self.file_extension):
                            file_path = os.path.join(root, file)
                            
                            if self.limits_max_file_size != -1 and (os.path.getsize(file_path) / (1024 * 1024)) > self.limits_max_file_size:
                                continue
                            
                            try:
                                with open(file_path, "r", encoding="UTF-8") as f:
                                    content = f.read()
                                    for match in regex.finditer(content):
                                        if not self.is_running or (self.limits_max_results_count != -1 and results_count >= self.limits_max_results_count):
                                            break
                                        self.found_signal.emit(file_path, match.start())
                                        results_count += 1
                                        
                            except Exception as e:
                                print("Failed to read file. Error: ", e)

class Ui_SearchWindow(object):
    def setupUi(self, MainWindow, title: str, icon : QtGui.QIcon, size : QtCore.QRect):
        self.MainWindow = MainWindow

        MainWindow.setObjectName("SearchWindow")
        MainWindow.setWindowTitle(title)
        MainWindow.resize(size.width(), size.height())
        MainWindow.move(size.x(), size.y())
        MainWindow.setWindowIcon(QtGui.QIcon(icon))
        MainWindow.setStyleSheet(f"background-color: {get_widget_style("SearchWindow", "background-color")};\n"
"color: white;\n"
"selection-background-color: rgb(255, 255, 127);")
        
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOn)
        self.scrollArea.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scrollAreaWidgetContents = QtWidgets.QWidget(self.centralwidget)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.scrollArea.setGeometry(0, 0, MainWindow.width(), MainWindow.height())
        
        self.scrollArea.setStyleSheet(f"""
    QScrollBar:vertical {{
        border: none;
        background: {get_widget_style("SearchWindow", "background-color")};
        width: 14px;
        margin: 15px 0 15px 0;
    }}
    QScrollBar::handle:vertical {{
        background: {get_widget_style("SearchWindow", "scroll-color")};
        min-height: 20px;
    }}
    QScrollBar::add-line:vertical {{
        background: none;
        height: 15px;
        subcontrol-position: bottom;
        subcontrol-origin: margin;
    }}
    QScrollBar::sub-line:vertical {{
        background: none;
        height: 15px;
        subcontrol-position: top;
        subcontrol-origin: margin;
    }}
    QScrollBar::up-arrow:vertical, QScrollBar::down-arrow:vertical {{
        background: none;
    }}
    QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {{
        background: none;
    }}
""")
        
        self.verticalLayout = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setAlignment(QtCore.Qt.AlignmentFlag.AlignTop | QtCore.Qt.AlignmentFlag.AlignHCenter)

        self.searched_files = 0
        self.label = QtWidgets.QLabel(f"Search result: {self.searched_files} matches", self.scrollAreaWidgetContents)
        self.label.setStyleSheet(f"""
                                background-color: {get_widget_style("SearchWindow_Header", "background-color")};
                                border: 1px solid {get_widget_style("SearchWindow_Header", "border-color")};
                                color: {get_widget_style("SearchWindow_Header", "color")};
                                padding: 100%;
                                padding-top: 5px;
                                padding-bottom: 5px;
                                margin-bottom: 20px;
                                """)
        self.label.setFont(QtGui.QFont("Impact", 23))
        self.label.adjustSize()
        self.label.setFixedHeight(80)
        self.label.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter)
        
        self.verticalLayout.addWidget(self.label)
        
        self.code_editors = []

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.hightlight = []
    
    def addCodeEditor(self, content, focus_on, path):
        self.searched_files += 1
        self.label.setText(f"Search result: {self.searched_files} matches")

        label = QtWidgets.QLabel(path, self.scrollAreaWidgetContents)
        label.setStyleSheet(f"""
                                background-color: {get_widget_style("SearchWindow_CodeViewer", "file-background-color")};
                                color: {get_widget_style("SearchWindow_CodeViewer", "file-color")};
                                margin-top: 5px;
                                """)
        label.setFont(QtGui.QFont("sans-serif", 14))
        label.adjustSize()
        label.setFixedHeight(30)
        label.setAlignment(QtCore.Qt.AlignmentFlag.AlignLeft)
        
        self.verticalLayout.addWidget(label)
        
        widget = QtWidgets.QPlainTextEdit(content, self.scrollAreaWidgetContents)
        self.code_editors.append(widget)

        widget.setFixedHeight(700)
        widget.setStyleSheet(f"""
                                font-family: Consolas, 'Courier New', monospace;
                                font-size: 16px;
                                background-color: {get_widget_style("SearchWindow_CodeViewer", "code-background-color")};
                                color: {get_widget_style("SearchWindow_CodeViewer", "default-color")};
                                selection-color: {get_widget_style("SearchWindow_CodeViewer", "selection-color")};
                                selection-background-color: {get_widget_style("SearchWindow_CodeViewer", "selection-background-color")};
                                border: 1px solid {get_widget_style("SearchWindow_CodeViewer", "border-color")};
                                margin-bottom: 20px;
                                """)
        
        cursor = widget.textCursor()
        cursor.setPosition(focus_on)
        widget.setTextCursor(cursor)
        widget.setFocus()

        extra_selection = []

        try:
            red, green, blue = get_widget_style("SearchWindow_CodeViewer", "extra-selection-background-color").replace("rgb(", "").replace(")", "").split(", ")
        except Exception:
            red, green, blue = 0, 0, 0
        line_color = QtGui.QColor(int(red), int(green), int(blue))

        selection = QtWidgets.QTextEdit.ExtraSelection()
        selection.format.setBackground(line_color)
        selection.format.setProperty(QtGui.QTextFormat.FullWidthSelection, True)
        selection.cursor = cursor
        selection.cursor.clearSelection()

        extra_selection.append(selection)
        widget.setExtraSelections(extra_selection)

        self.add_syntax_highlight(widget, os.path.splitext(path)[1])

        self.verticalLayout.addWidget(widget)
    def add_syntax_highlight(self, widget : QtWidgets.QPlainTextEdit, extension):
        if extension == ".py":
            syntax = SyntaxHighlighter.SyntaxType.PythonSyntax
        elif extension == ".cpp" or extension == ".hpp":
            syntax = SyntaxHighlighter.SyntaxType.CPPSyntax
        elif extension == ".c" or extension == ".h":
            syntax = SyntaxHighlighter.SyntaxType.CSyntax
        elif extension == ".js":
            syntax = SyntaxHighlighter.SyntaxType.JSSyntax
        elif extension == ".html":
            syntax = SyntaxHighlighter.SyntaxType.HTMLSyntax
        elif extension == ".css":
            syntax = SyntaxHighlighter.SyntaxType.CSSSyntax
        elif extension == ".lua":
            syntax = SyntaxHighlighter.SyntaxType.LuaSyntax
        else:
            syntax = None

        if syntax:
            self.hightlight.append(SyntaxHighlighter(widget.document(), syntax))
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("SearchWindow", "SearchWindow"))

    def update(self):
        self.scrollArea.setGeometry(0, 0, self.MainWindow.width(), self.MainWindow.height())

class SearchWindow(QtWidgets.QMainWindow):
    def __init__(self, parent, title, icon, size):
        super().__init__(parent)
        self.ui = Ui_SearchWindow()
        self.ui.setupUi(self, title, icon, size)

    def resizeEvent(self, event):
        self.ui.update()
        super().resizeEvent(event)